                      HEAP 


IT IS A COMPLETE BINARY TREE THAT COMES WITH A HEAP ORDER PROPERTY 

WHAT IS COMPLETE BINARY TREE?
EVERY LEVEL IS COMPLETELY FILLED EXCEPT THE LAST LEVEL
NODES ALWAYS ADDED FROM THE LEFT LEAN TOWARDS RIGHT  

HEAP ORDER PROPERTY 
-> MAX HEAP (PARENT NODE>LEAF NODES)
-> MIN HEAP (LEAF NODE>PARENT NODE)

3. üßÆ Heap Representation (0-based indexing)
Typically implemented using arrays:

For node at index i:

Left Child ‚Üí 2i + 1

Right Child ‚Üí 2i + 2

Parent ‚Üí (i - 1) / 2

üî¢ Heap Representation (1-Based Indexing)
If your array starts at index 1 (common in many textbooks or competitive programming), the formulas are:

Relationship	Formula
Parent of i	i / 2
Left Child	2 * i
Right Child	2 * i + 1

// using priority queue for the purpose of heap sorting so there are basically two methods

1) maxheap 
2) minheap 

1) maxheap :-
    priority_queue<int>pq;
    whenever elements are pushed it store in descending order meaning the greatest no. on top 

2) minheap :-
    priority_queue<int,vector<int>,greater<int>>minheap;
    whenever elements are pushed into it the smallest element is at the top 


    ‚úÖ C++ priority_queue (Max-Heap by default)
Operation   	                     Time Complexity	            Description
push(x)	                                 O(log n)	             Insert element and maintain heap property
pop()	                                 O(log n)	              Remove top (largest) element
top()	                                   O(1)	                  Access the maximum element
size() / empty()	                       O(1)	                   Check size or if empty
Access specific element	               ‚ùå Not allowed	          No random access
Search / Update / Remove arbitrary	   ‚ùå Not supported	            Not allowed